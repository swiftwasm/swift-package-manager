/*
 This source file is part of the Swift.org open source project

 Copyright (c) 2021 Apple Inc. and the Swift project authors
 Licensed under Apache License v2.0 with Runtime Library Exception

 See http://swift.org/LICENSE.txt for license information
 See http://swift.org/CONTRIBUTORS.txt for Swift project authors
 */

/// Constructs commands to run during the build, including full command lines.
/// All paths should be based on the ones passed to the plugin in the target
/// build context.
public final class CommandConstructor {
    /// Prevents the CommandConstructor from being instantiated by the script.
    internal init() {}

    /// Creates a command to run during the build. The executable should be a
    /// path returned by `TargetBuildContext.lookupTool(named:)`, and all the
    /// paths in both the command line and the input and output lists should be
    /// based on the paths in the target build context structure.
    ///
    /// Note that input and output dependencies are ignored for prebuild and
    /// postbuild actions, since they always run before and after the build
    /// respectively.
    public func createCommand(
        displayName: String?, executable: Path, arguments: [String], workingDirectory: Path? = nil, environment: [String: String]? = nil, inputPaths: [Path] = [], outputPaths: [Path] = [], derivedSourcePaths: [Path] = []
    ) {
        output.commands.append(Command(executable: executable, arguments: arguments, workingDirectory: workingDirectory, environment: environment, displayName: displayName, inputPaths: inputPaths, outputPaths: outputPaths, derivedSourcePaths: derivedSourcePaths))
    }

    /// Registers the path of an output file generated by a `buildTool` plugin
    /// for furher processing.
    public func addGeneratedOutputFile(path: Path) {
        output.generatedFilePaths.append(path.string)
    }

    /// Registers the path of a directory of output files generated by a `prebuild`
    /// plugin for furher processing.
    public func addPrebuildOutputDirectory(path: Path) {
        output.prebuildOutputDirectories.append(path.string)
    }
}
